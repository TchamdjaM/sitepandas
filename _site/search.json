[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "ABOUT",
    "section": "",
    "text": "Finley Malloc est les scientifiques en chef des données chez xxxx.\nApprenez-en davantage sur les pandas avec lui.",
    "crumbs": [
      "ABOUT"
    ]
  },
  {
    "objectID": "about.html#more-and-more",
    "href": "about.html#more-and-more",
    "title": "ABOUT",
    "section": "MORE AND MORE",
    "text": "MORE AND MORE\nBienvenue sur PandasCours, votre destination pour maîtriser Pandas, la bibliothèque Python essentielle pour l’analyse de données.\nDécouvrez nos cours structurés, nos tutoriels pratiques\nRejoignez-nous dès maintenant et explorez le monde de l’analyse de données avec Pandas!",
    "crumbs": [
      "ABOUT"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HOME",
    "section": "",
    "text": "Découvrez la puissance de Pandas : une bibliothèque incontournable pour l’analyse de données en Python\nLe module pandas est une bibliothèque de programmation Python extrêmement populaire et largement utilisée dans le domaine de l’analyse de données. Conçue pour offrir des structures de données puissantes et flexibles, pandas simplifie le traitement des données structurées telles que les tableaux et les séries temporelles, permettant aux analystes et aux scientifiques des données de travailler de manière intuitive et efficace.\nPrincipaux aspects de Pandas :\n\nStructures de données flexibles : pandas offre deux principales structures de données : les DataFrame et les Series. Les DataFrame sont des structures tabulaires bidimensionnelles, similaires à des feuilles de calcul, où chaque colonne peut être de type différent. Les Series sont des structures unidimensionnelles similaires aux tableaux ou aux listes, mais avec des fonctionnalités supplémentaires.\nFonctionnalités puissantes pour le traitement des données : Lecture et écriture de données : Pandas prend en charge la lecture et l’écriture de données à partir de divers formats tels que CSV, Excel, SQL, et plus encore. Nettoyage des données : Il offre des outils puissants pour le nettoyage des données, y compris la gestion des valeurs manquantes, le filtrage, le tri et la fusion de données. Manipulation des données : Pandas permet de manipuler facilement les données en effectuant des opérations telles que le filtrage, le tri, le regroupement, et les opérations mathématiques sur les données. Analyse exploratoire des données (EDA) : Avec ses fonctions intégrées pour le calcul de statistiques descriptives et la visualisation de données, Pandas facilite l’exploration et l’analyse initiale des données.\nIntégration transparente avec d’autres bibliothèques Python : pandas s’intègre parfaitement avec d’autres bibliothèques populaires telles que NumPy, Matplotlib, Scikit-learn, et plus encore, offrant ainsi aux utilisateurs une suite complète d’outils pour l’analyse de données et le machine learning.\nCommunauté active et support continu : Avec une communauté active et engagée d’utilisateurs et de contributeurs, pandas bénéficie d’un support continu, ce qui en fait un choix fiable pour les projets d’analyse de données de toutes tailles.\n\nEn résumé, pandas est bien plus qu’une simple bibliothèque Python ; c’est un outil essentiel pour tout professionnel travaillant avec des données structurées. Que ce soit pour explorer, nettoyer, analyser ou visualiser des données, pandas offre une solution puissante et intuitive pour répondre aux besoins de l’analyse de données moderne.\nMais avant de débuter en Pandas, Je vous propose de rédécouvrir avec moi certaines bases en : Python",
    "crumbs": [
      "HOME"
    ]
  },
  {
    "objectID": "python.html",
    "href": "python.html",
    "title": "Python basic",
    "section": "",
    "text": "Nous allons revoir les bases du langage python pour s’assurer que vous êtes bien apte à apprendre Pandas.",
    "crumbs": [
      "PYTHON",
      "Python basic"
    ]
  },
  {
    "objectID": "python.html#cest-quoi-python",
    "href": "python.html#cest-quoi-python",
    "title": "Python basic",
    "section": "1. C’est quoi Python ?",
    "text": "1. C’est quoi Python ?\nPython est un langage de programmation offrant une syntaxe simple, une programmation orientée objet ainsi qu’une large collection de bibliothèques.\nC’est un langage interprété et doté d’un typage dynamique fort.\nPython effectue des vérifications de cohérence sur les types manipulés, et permet de transformer explicitement une variable d’un type à un autre.",
    "crumbs": [
      "PYTHON",
      "Python basic"
    ]
  },
  {
    "objectID": "python.html#quelques-bonne-pratiques",
    "href": "python.html#quelques-bonne-pratiques",
    "title": "Python basic",
    "section": "2. Quelques bonne pratiques",
    "text": "2. Quelques bonne pratiques\n-Ne pas utiliser d’accent, ni de signe de ponctuation ou @.\n-Les chiffres ne doivent pas être utilisés comme premier caractère.\n-(m+1=b) Ce qui se trouve à gauche du signe égal doit toujours être un nom de variable et non une expression.\n-Respecter la convention de nommage snake_case.\n-Privilégier l’écriture du code en anglais.\nSi vous cherchez à apprendre Pandas, c’est que vous connaissez déjà le langage Python. Alors sans plus tarder, commençons les exercices de remise à niveau.",
    "crumbs": [
      "PYTHON",
      "Python basic"
    ]
  },
  {
    "objectID": "py-syntaxe.html",
    "href": "py-syntaxe.html",
    "title": "Syntaxe - Variables",
    "section": "",
    "text": "Commençons avec des exercices pour vous rappeler la syntaxe et les variables.",
    "crumbs": [
      "PYTHON",
      "Syntaxe - Variables"
    ]
  },
  {
    "objectID": "py-syntaxe.html#exercise-sur-les-calculs",
    "href": "py-syntaxe.html#exercise-sur-les-calculs",
    "title": "Syntaxe - Variables",
    "section": "Exercise sur les calculs",
    "text": "Exercise sur les calculs\n\n  &lt;code data-type=\"pre-exercise-code\"&gt;# no pec&lt;/code&gt;\n  &lt;code data-type=\"sample-code\"&gt;\n    # Calculate 3 + 4\n    3 + 4\n\n    # Calculate 6 + 12\n  &lt;/code&gt;\n  &lt;code data-type=\"solution\"&gt;\n    # Calculate 3 + 4\n    3 + 4\n\n    # Calculate 6 + 12\n    6 + 12&lt;/code&gt;\n  &lt;code data-type=\"sct\"&gt;\n    test_output_contains(&quot;18&quot;, incorrect_msg = &quot;Make sure to add `6 + 12`\n    on\n    a new line. Do not start the line with a `#`, otherwise your R code is not executed!&quot;)\n    success_msg(&quot;Awesome! See how the console shows the result of the R code you\n    submitted? Now that you&#39;re familiar with the interface, let&#39;s get down to R\n    business!&quot;)\n  &lt;/code&gt;\n  &lt;div data-type=\"hint\"&gt;\n    &lt;p&gt;Just add a line of R code that calculates the sum of 6 and 12, just like the\n      example\n      in the sample code!&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;",
    "crumbs": [
      "PYTHON",
      "Syntaxe - Variables"
    ]
  },
  {
    "objectID": "py-syntaxe.html#exercice-sur-les-calculs",
    "href": "py-syntaxe.html#exercice-sur-les-calculs",
    "title": "Syntaxe - Variables",
    "section": "Exercice sur les calculs",
    "text": "Exercice sur les calculs\n\n  &lt;code data-type=\"pre-exercise-code\"&gt;# no pec&lt;/code&gt;\n  &lt;code data-type=\"sample-code\"&gt;\n    # Calculate 3 + 4\n    3 + 4\n\n    # Calculate 6 + 12\n  &lt;/code&gt;\n  &lt;code data-type=\"solution\"&gt;\n    # Calculate 3 + 4\n    3 + 4\n\n    # Calculate 6 + 12\n    6 + 12&lt;/code&gt;\n  &lt;code data-type=\"sct\"&gt;\n    test_output_contains(&quot;18&quot;, incorrect_msg = &quot;Make sure to add `6 + 12`\n    on\n    a new line. Do not start the line with a `#`, otherwise your R code is not executed!&quot;)\n    success_msg(&quot;Awesome! See how the console shows the result of the R code you\n    submitted? Now that you&#39;re familiar with the interface, let&#39;s get down to R\n    business!&quot;)\n  &lt;/code&gt;\n  &lt;div data-type=\"hint\"&gt;\n    &lt;p&gt;Just add a line of R code that calculates the sum of 6 and 12, just like the\n      example\n      in the sample code!&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;",
    "crumbs": [
      "PYTHON",
      "Syntaxe - Variables"
    ]
  },
  {
    "objectID": "py-syntaxe.html#exercice-sur-les-variables",
    "href": "py-syntaxe.html#exercice-sur-les-variables",
    "title": "Syntaxe - Variables",
    "section": "Exercice sur les variables",
    "text": "Exercice sur les variables\n\n  &lt;code data-type=\"pre-exercise-code\"&gt;# no pec&lt;/code&gt;\n  &lt;code data-type=\"sample-code\"&gt;\n    Calculate 3 + 4\n    3 + 4\n\n    # Calculate 6 + 12\n  &lt;/code&gt;\n  &lt;code data-type=\"solution\"&gt;\n    Calculate 3 + 4\n    3 + 4\n\n    # Calculate 6 + 12\n    6 + 12&lt;/code&gt;\n\n  &lt;code data-type=\"sct\"&gt;\n    test_output_contains(&quot;18&quot;, incorrect_msg = &quot;Make sure to add `6 + 12`\n    on\n    a new line. Do not start the line with a `#`, otherwise your R code is not executed!&quot;)\n    success_msg(&quot;Awesome! See how the console shows the result of the R code you\n    submitted? Now that you&#39;re familiar with the interface, let&#39;s get down to R\n    business!&quot;)\n  &lt;/code&gt;\n\n  &lt;div data-type=\"hint\"&gt;\n    &lt;p&gt; juste faire 6+12 comme l'exemple &lt;/p&gt;\n  &lt;/div&gt;"
  }
]